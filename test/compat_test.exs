defmodule CompatTest do
  use ExUnit.Case

  # alias Cryppo.EncryptionKey

  test "can decrypt a serialized encrypted value encrypted with Aes256Gcm by Ruby Cryppo" do
    {:ok, key} = Base.url_decode64("S5-0MiMs1jkg52bB9nzl1IoNYzxfSyxuoIx6Tvj2vCk=")

    serialized_and_encrypted =
      "Aes256Gcm.29dTcNFcPs-0SOnA.LS0tCml2OiAhYmluYXJ5IHwtCiAgUU1oRnpWZWU3bzE5Qy9XcwphdDogIWJpbmFyeSB8LQogIGFKQjVhYU0wWGZnTjZCYm42U0FzUnc9PQphZDogbm9uZQo="

    restored_encrypted_data = Cryppo.load(serialized_and_encrypted)

    assert Cryppo.decrypt(restored_encrypted_data, key) == {:ok, "this is love"}
  end

  test "can decrypt a serialized encrypted value encrypted with Rsa4096 by Ruby Cryppo" do
    _pem =
      "-----BEGIN RSA PRIVATE KEY-----\n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\n-----END RSA PRIVATE KEY-----\n"

    serialized =
      "Rsa4096.ANxGA0SX8ScbR6SuOsc56ypr8EEP1fHLa1DS4yWcbA-hw1mFsGwNIiYrQVG71zyO2tx9XF4IVLkrBxwQWjG9fhcyK4R_U78tId5OVOoi2MNUfYdBdkwkQO51xTY5m-FzVjtUvJiFJkSedFKBeWfCn9nF2o3hZ-tlLpLa0YVZU_LwxrUlXSMmALYBIJFhEIcddMusaIGtNqBEEd8KWVH5drwt_B4TbXH92eFb_H9nex5yREhHZJPyc694nTzKN2hPgB3loHNc6uZHinZHEQnhdijXTGlN9tF3sLOgZjvEQmQmzSSvS3ldO5FFwj0GTKHt-s0ZlX9_cl1DhU91IlqIwk3a_A2-4grmOaHB2BGd8_BcyVxIgeNBT6am6a4AetCNX4DyCPCYnJN1Vj0D9vQzCRBCac_DmIBrnE5MoE7sjmkTrA4KE9LTBejIty0BAIiCXmHs8XKxI4Ct6lFHkDXXpv7wD5XBEAxhTI1deuLh2aEaOs9ejcc-OKDmwgMrWI3mZgvTydiJChJLm3a7FJreVvOW2g5A3R2gpziEGTqtaQdnuJN3hqqaACxcnEONB-wnL8dQBkucMGwJKS5WEg6iT8yEfmfelHyOow4SzBrrrHWeDg4rOF9UeKPU0mqxoqwvWOMzhRbnJGdC-UdvYfRQC4VwJWJo7Z1ue2j8y9Xs2PE=.LS0tIHt9Cg=="

    _restored_encrypted_data = Cryppo.load(serialized)

    # key = %EncryptionKey{
    #   key: key,
    #   encryption_strategy_module: Cryppo.Aes256gcm
    # }

    # IO.puts("")
    # Cryppo.decrypt(restored_encrypted_data, pem) |> IO.inspect()

    # assert Cryppo.decrypt(restored_encrypted_data, key) == {:ok, "this is love"}
  end

  test "encrypt with pem from ruby, decrypt, serialize, de-serialize, decrypt" do
    pem =
      "-----BEGIN RSA PRIVATE KEY-----\n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\n-----END RSA PRIVATE KEY-----\n"

    encrypted = Cryppo.encrypt("this is love", "Rsa4096", pem)
    assert Cryppo.decrypt(encrypted, pem) == {:ok, "this is love"}

    ser = Cryppo.Serialization.serialize(encrypted)
    encrypted2 = Cryppo.Loader.load(ser)
    assert Cryppo.decrypt(encrypted2, pem) == {:ok, "this is love"}
  end
end
